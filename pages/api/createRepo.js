import { load } from 'cheerio';

export default async function handler(req, res) {
    const token = req.body.accessToken
    const repoOwner = req.body.repoOwner
    const repoName = req.body.repoName
    const user = await fetch("https://api.github.com/user", {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": `Bearer ${token}`
        }
    }).then(res => res.json())
        .then(data => {
            console.log(data)
            return data.login
        })
    await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/generate`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify({
            "owner": user,
            "name": repoName,
            "description": "This is a repository generated by the GitHub API",
            "include_all_branches": false,
            "private": false,
        })
    })
        .then(res => res.json())
        .then(data => {
            console.log(data)
        })
    // read /user/reponame/quixfolio.json
    await fetch(`https://raw.githubusercontent.com/${repoOwner}/${repoName}/main/quixfolio.json`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": `Bearer ${token}`
        }
    })
        .then(res => res.json())
        .then(async data => {
            // wait for 1 second
            await new Promise(resolve => setTimeout(resolve, 1000))
            console.log(data.pages)
            let pages = {}
            // fetch all of the pages
            for (let page in data.pages) {
                // console.log(pages)
                if (!pages[data.pages[page]]) {
                    console.log(data.pages[page])
                    await fetch(`https://api.github.com/repos/${user}/${repoName}/contents/${data.pages[page]}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "Accept": "application/json",
                            "Authorization": `Bearer ${token}`
                        }
                    })
                        .then(res => res.json())
                        .then(file => {
                            console.log(file)
                            if (file.content) {
                                let content = Buffer.from(file.content, 'base64').toString('ascii')
                                pages[data.pages[page]] = {
                                    content: content,
                                    sha: file.sha
                                }
                            }
                        })
                }
            }

            function changeContent(id, page, newContent) {
                const $ = load(pages[page].content)
                $(`#${id}`).text(newContent)
                pages[page].content = $.html()
            }
            const name = data.pages["name"]
            const summary = data.pages["summary"]
            const education = data.pages["education"]
            changeContent("name", name, "HarshilDB")
            changeContent("summary", summary, "This is a test")
            const $ = load(pages[name].content)
            let educationDiv = $("#education")
            // get first child of education div
            let edu1 = educationDiv.children().first().clone()
            // modify the education div with custom tag university
            edu1.find("[university]").text("HarshilDB")
            edu1.find("[start-year]").text("2019")
            edu1.find("[end-year]").text("2023")
            edu1.find("[major]").text("Computer Science")
            edu1.find("[gpa]").text("2.6")
            educationDiv.children().remove()
            educationDiv.append(edu1.clone())
            educationDiv.append(edu1.clone())
            console.log(educationDiv.html())
            pages[name].content = $.html()
            await Promise.all(Object.keys(pages).map(async page => {
                await fetch(`https://api.github.com/repos/${user}/${repoName}/contents/${page}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        "message": "Update page content",
                        "content": btoa(pages[page].content),
                        "sha": pages[page].sha
                    })
                }).then(res => res.json())
                    .then(data => {
                        console.log(data)
                    })
            }))
        })

    res.status(200).json({ status: "ok" })
}